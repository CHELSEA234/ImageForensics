from PyQt6.QtCore import Qt, QMimeData, QUrl
from PyQt6.QtGui import QDragEnterEvent, QDropEvent, QImage, QPixmap, QFont
from PyQt6.QtWidgets import QApplication, QLabel, QMainWindow, QPushButton, QFileDialog

class ImageWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Image Viewer")
        # Enable drop functionality
        self.setAcceptDrops(True) 

        self.image_label = QLabel(self)
        # Center-align the label
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)  
        self.setCentralWidget(self.image_label)

        self.placeholder_text = "Drag and drop an image or click the button below to select"
        self.image_label.setText(self.placeholder_text)
        # Set font 
        self.image_label.setFont(QFont("Arial", 12, weight=QFont.Weight.Light))  

        self.select_button = QPushButton("Select Image", self)
        self.select_button.clicked.connect(self.select_image)

    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            # Accept drag event if it contains URLs
            event.acceptProposedAction()  

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            url = event.mimeData().urls()[0]
            # Get local file path from the dropped URL
            image_path = url.toLocalFile()  

            self.display_image(image_path)

    def select_image(self):
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("Image Files (*.png *.jpg *.jpeg)")
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)
        if file_dialog.exec() == QFileDialog.DialogCode.Accepted:
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                image_path = selected_files[0]
                # Call the display_image method to display the selected image
                self.display_image(image_path)
        
    def display_image(self, image_path: str):
        image = QImage(image_path)
        pixmap = QPixmap.fromImage(image)

        self.image_label.setPixmap(pixmap)
        self.image_label.setText("")
        self.image_label.adjustSize()

        self.resize(image.width(), image.height())


if __name__ == "__main__":
    app = QApplication([])
    window = ImageWindow()
    window.select_button.move(10, 10)
    window.show()

    app.exec()
